#Christina Hammer
#new client Gui

from tkinter import *
from tkinter import messagebox


from sqlalchemy import Column, DateTime, String, Integer, ForeignKey, func
from sqlalchemy.orm import relationship, backref
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from datetime import datetime, timedelta, date
from cdbtabledef import Household, Person, Volunteer, Visit
from cdbfunctions import *
from cdbifunc import *

def clientinfoconfirm(n,f,l,dtob,doe,st,dv,ph,apt,city,sta,z):
    
    #messagebox.OK("Changes Saved","New Client has been added!")
    hhid=insert_household(n, st, dv, apt, city,sta,z)
    insert_person(n, f, l, dtob, doe,hhid,ph)
    print ('New Client Added!')
    #ncGui.destroy()
    return
    
def cancelentry():
    cancel_changes()
    ncGui.destroy()
    return
    
#new client GUI
ncGui=Tk()

ncGui.geometry('800x200+400+200')

ncGui.title('Add New Client')

#Label(ncGui, text="Please enter the following information: \n").grid(row=0, column=0)

#entry variables
fnamev = StringVar()
lnamev = StringVar()
mbv = IntVar()
dbv = IntVar()
ybv = IntVar()

phonev=IntVar()
addressv=StringVar()
aptv = StringVar()
cityv = StringVar()
statev = StringVar()
zipcv = StringVar()
#moev = StringVar()
#doev = StringVar()
#yoev = StringVar()

#Labels and entries
Label(ncGui, text="First Name").grid(row=1, column=0)
fname = Entry(ncGui)
fname.grid(row=2, column=0)
f=fname.get()

Label(ncGui, text="Last Name ").grid(row=1, column=1)
lname = Entry(ncGui)
lname.grid(row=2, column=1)
l=lname.get()

Label(ncGui, text="Date of Birth").grid(row=1, column=2)
mob=Entry(ncGui,textvariable=mbv)
mbv.set(1)
mob.grid(row=2, column=2)
mob=mbv.get()

dob=Entry(ncGui,textvariable=dbv)
dbv.set(1)
dob.grid(row=2, column=3)
dob=dbv.get()

yob=Entry(ncGui,textvariable=ybv)
ybv.set(2000)
yob.grid(row=2, column=4)
yob=ybv.get()


Label(ncGui, text="Phone").grid(row=3, column=0)
phone = Entry(ncGui)
phone.grid(row=4, column=0)
ph=phone.get()


Label(ncGui, text="Address").grid(row=3, column=1)
address=Entry(ncGui)
address.grid(row=4, column=1)
st=address.get()


Label(ncGui, text="Apt.").grid(row=3, column=2)
apt=Entry(ncGui)
apt.grid(row=4, column=2)
apt=apt.get()

Label(ncGui, text="City").grid(row=3, column=3)
city=Entry(ncGui,textvariable=cityv)
city.grid(row=4, column=3)
cityv.set('Troy')
city=cityv.get()

Label(ncGui, text="State").grid(row=5, column=0)
state=Entry(ncGui, textvariable=statev)
state.grid(row=6, column=0)
statev.set('NY')
sta=statev.get()

Label(ncGui, text="Zip").grid(row=5, column=1)
zipc=Entry(ncGui,textvariable=zipcv)
zipc.grid(row=6, column=1)
zipcv.set('12180')
z=zipcv.get()

'''
Label(ncGui, text="Date of Entry").grid(row=5, column=2)
moe=Entry(ncGui,textvariable=moev)
moe.grid(row=6, column=2)
moev.set('mm')

me=moev.get()
mvar=moev.get()

doe=Entry(ncGui)
doe.grid(row=6, column=2)
doev.set('dd')

de=doev.get()
dvar=doev.get()

yoe=Entry(ncGui)
yoe.grid(row=6, column=2)
yoev.set('yyyy')

ye=yoev.get()
yvar=yoev.get()
'''

de=date.today()
dv=date.today()
dtob=date(yob,mob,dob)


###add fields for
###associate entries for family members with an id;
    ##the ids could be stored in a list/array, where every spot in the list
    #corresponds to a family member.
    #you could send all family member info in tuples - one tuple for each member's info


#new client - no id involved
#update client - I'm sending id's, you send them back to me

#PROBLEM: make sure the info for each client/family member is attached to their id somehow
#when you send it back to me.


n=1 #indiv session id for now


Cancel=Button(ncGui,text='Cancel', command=cancelentry).grid(row=7,column=1)
Confirm=Button(ncGui,text='Add Client', command=clientinfoconfirm(n,f,l,dtob,de,st,dv,ph,apt,city,sta,z)).grid(row=7,column=2)


ncGui.mainloop()





